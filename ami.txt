// import httpStatus from 'http-status';
// import mongoose from 'mongoose';
// import { TBooking } from './booking.interface';
// import { validateBooking } from './booking.validation';
// import BookingModel from './booking.model';
// import AppError from '../../errors/AppError';


// // Helper function to calculate the total cost
// const calculateTotalCost = (startTime: string, endTime: string, pricePerHour: number): number => {
//   const start = new Date(`1970-01-01T${startTime}:00Z`);
//   const end = new Date(`1970-01-01T${endTime}:00Z`);
//   const duration = (end.getTime() - start.getTime()) / (1000 * 60 * 60); // Duration in hours
//   return duration * pricePerHour;
// };

// const createBookingIntoDB = async (payload: Omit<TBooking, 'totalCost'>) => {
//   // Validate input data
//   validateBooking.createBookingValidation.parse({ body: payload });

//   // Calculate total cost
//   const pricePerHour = 20; // Example price per hour
//   const totalCost = calculateTotalCost(payload.startTime, payload.endTime, pricePerHour);

//   const result = await BookingModel.create({ ...payload, totalCost });
//   return result;
// };

// const getAllBookingsFromDB = async (query: Record<string, unknown>) => {
//   const bookings = await BookingModel.find(query).lean().exec();
//   return bookings;
// };

// const getSingleBookingFromDB = async (id: string) => {
//   if (!mongoose.Types.ObjectId.isValid(id)) {
//     throw new AppError(httpStatus.BAD_REQUEST, 'Invalid booking ID');
//   }
//   const result = await BookingModel.findById(id).lean().exec();
//   return result;
// };

// const updateBookingIntoDB = async (id: string, payload: Partial<TBooking>) => {
//   if (!mongoose.Types.ObjectId.isValid(id)) {
//     throw new AppError(httpStatus.BAD_REQUEST, 'Invalid booking ID');
//   }

//   // Validate the update data
//   if (payload.startTime && payload.endTime) {
//     const pricePerHour = 20; // Example price per hour
//     payload.totalCost = calculateTotalCost(payload.startTime, payload.endTime, pricePerHour);
//   }

//   const result = await BookingModel.findByIdAndUpdate(id, payload, {
//     new: true,
//     runValidators: true,
//   }).lean().exec();

//   if (!result) {
//     throw new AppError(httpStatus.NOT_FOUND, 'Booking not found');
//   }

//   return result;
// };

// const deleteBookingFromDB = async (id: string) => {
//   if (!mongoose.Types.ObjectId.isValid(id)) {
//     throw new AppError(httpStatus.BAD_REQUEST, 'Invalid booking ID');
//   }
//   const result = await BookingModel.findByIdAndDelete(id).lean().exec();
//   if (!result) {
//     throw new AppError(httpStatus.NOT_FOUND, 'Booking not found');
//   }
//   return result;
// };

// export const BookingServices = {
//   createBookingIntoDB,
//   getAllBookingsFromDB,
//   getSingleBookingFromDB,
//   updateBookingIntoDB,
//   deleteBookingFromDB,
// };